<launch>
  <arg name="sim"/>

  <!-- connect to or simulate a robot -->
  <include file="$(find ur_gazebo)/launch/ur5.launch" if="$(arg sim)">
  </include>

  <!-- visualize the robot -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find plating_demo)/config/ur5_demo.rviz" /> -->

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find ur5_e_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
  </include>

  <!-- set up a service to forward goal locations to commands to the robot -->
  <node name="track_pose_service" pkg="feedbot_trajectory_logic" type="track_pose_service" respawn="false" output="screen">
    <!--launch-prefix="/home/travers/run_tmux.sh">-->
    <rosparam command="load"
              file="$(find niryo_one_moveit_config)/config/kinematics.yaml"/>
    <param name="update_rate_hz" type="double" value="10"/>
    <param name="step_size_meters" type="double" value="0.03"/>
    <param name="robot_type" type="string" value="ur5"/> <!--"custom_domus", "niryo", "ur5", or "sim" !-->
  </node>

  <!-- the "logic" node that says what thing the robot should do (eg: should do some cool moves) -->
  <node name="play_demo" pkg="plating_demo" type="run_ur5_demo.py" output="screen"> 
  </node>

  <!-- set up a service that can read in text files and create goal poses -->
  <node name="play_trajectory_service" pkg="learn_trajectory" type="play_trajectory_server.py" output="screen"/>
</launch>
